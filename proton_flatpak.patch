diff --git a/proton b/proton
index f8e0d95..6ff231b 100755
--- a/proton
+++ b/proton
@@ -94,42 +94,36 @@ def set_dir_casefold_bit(dir_path):
 class Proton:
     def __init__(self, base_dir):
         self.base_dir = base_dir + "/"
-        self.dist_dir = self.path("dist/")
-        self.bin_dir = self.path("dist/bin/")
-        self.lib_dir = self.path("dist/lib/")
-        self.lib64_dir = self.path("dist/lib64/")
-        self.fonts_dir = self.path("dist/share/fonts/")
+        self.dist_dir = self.base_dir
+        self.bin_dir = self.path("bin/")
+        self.lib_dir = self.path("lib32/")
+        self.lib64_dir = self.path("lib/")
+        self.fonts_dir = self.path("share/fonts/")
         self.version_file = self.path("version")
-        self.default_pfx_dir = self.path("dist/share/default_pfx/")
+        self.default_pfx_dir = os.path.join(self.cahce_dir(), "default_pfx")
         self.user_settings_file = self.path("user_settings.py")
         self.wine_bin = self.bin_dir + "wine"
         self.wineserver_bin = self.bin_dir + "wineserver"
-        self.dist_lock = FileLock(self.path("dist.lock"), timeout=-1)
+
+    def cahce_dir(self):
+        cache_dir = os.path.join(
+            os.getenv("XDG_CACHE_HOME", os.path.expanduser("~/.cache")),
+            "proton", CURRENT_PREFIX_VERSION
+        )
+        os.makedirs(cache_dir, exist_ok=True)
+        return cache_dir
 
     def path(self, d):
         return self.base_dir + d
 
-    def extract_tarball(self):
-        with self.dist_lock:
-            if not os.path.exists(self.dist_dir) or \
-                    not os.path.exists(self.path("dist/version")) or \
-                    not filecmp.cmp(self.version_file, self.path("dist/version")):
-                if os.path.exists(self.dist_dir):
-                    shutil.rmtree(self.dist_dir)
-                tar = tarfile.open(self.path("proton_dist.tar.gz"), mode="r:gz")
-                tar.extractall(path=self.dist_dir)
-                tar.close()
-                try_copy(self.version_file, self.dist_dir)
-
     def make_default_prefix(self):
-        with self.dist_lock:
-            local_env = dict(g_session.env)
-            if not os.path.isdir(self.default_pfx_dir):
-                #make default prefix
-                local_env["WINEPREFIX"] = self.default_pfx_dir
-                local_env["WINEDEBUG"] = "-all"
-                g_session.run_proc([self.wine_bin, "wineboot"], local_env)
-                g_session.run_proc([self.wineserver_bin, "-w"], local_env)
+        local_env = dict(g_session.env)
+        if not os.path.isdir(self.default_pfx_dir):
+            #make default prefix
+            local_env["WINEPREFIX"] = self.default_pfx_dir
+            local_env["WINEDEBUG"] = "-all"
+            g_session.run_proc([self.wine_bin, "wineboot"], local_env)
+            g_session.run_proc([self.wineserver_bin, "-w"], local_env)
 
 class CompatData:
     def __init__(self, compatdata):
@@ -325,86 +319,6 @@ class CompatData:
                         os.remove(dstfile)
                     try_copy(steamdir + "/legacycompat/" + f, dstfile)
 
-            #copy openvr files into place
-            dst = self.prefix_dir + "/drive_c/vrclient/bin/"
-            makedirs(dst)
-            try_copy(g_proton.lib_dir + "wine/fakedlls/vrclient.dll", dst)
-            try_copy(g_proton.lib64_dir + "wine/fakedlls/vrclient_x64.dll", dst)
-
-            try_copy(g_proton.lib_dir + "wine/dxvk/openvr_api_dxvk.dll", self.prefix_dir + "/drive_c/windows/syswow64/")
-            try_copy(g_proton.lib64_dir + "wine/dxvk/openvr_api_dxvk.dll", self.prefix_dir + "/drive_c/windows/system32/")
-
-            #parse linux openvr config and present it in win32 format to the app.
-            #logic from openvr's CVRPathRegistry_Public::GetPaths
-
-            #check environment for overrides
-            vr_runtime = None
-            if "VR_OVERRIDE" in g_session.env:
-                vr_runtime = g_session.env["VR_OVERRIDE"]
-                g_session.env.pop("VR_OVERRIDE")
-
-            vr_config = None
-            if "VR_CONFIG_PATH" in g_session.env:
-                vr_config = g_session.env["VR_CONFIG_PATH"]
-                g_session.env.pop("VR_CONFIG_PATH")
-
-            vr_log = None
-            if "VR_LOG_PATH" in g_session.env:
-                vr_log = g_session.env["VR_LOG_PATH"]
-                g_session.env.pop("VR_LOG_PATH")
-
-            #load from json if needed
-            if vr_runtime is None or \
-                    vr_config is None or \
-                    vr_log is None:
-                try:
-                    path = os.environ.get("XDG_CONFIG_HOME", os.environ["HOME"] + "/.config")
-                    path = path + "/openvr/openvrpaths.vrpath"
-
-                    with open(path, "r") as jfile:
-                        j = json.load(jfile)
-
-                    if vr_runtime is None:
-                        vr_runtime = j["runtime"][0]
-
-                    if vr_config is None:
-                        vr_config = j["config"][0]
-
-                    if vr_log is None:
-                        vr_log = j["log"][0]
-                except (TypeError, ValueError, OSError):
-                    log("Missing or invalid openvrpaths.vrpath file! " + str(sys.exc_info()[1]))
-
-            makedirs(self.prefix_dir + "/drive_c/users/steamuser/Local Settings/Application Data/openvr")
-
-            #remove existing file
-            vrpaths_name = self.prefix_dir + "/drive_c/users/steamuser/Local Settings/Application Data/openvr/openvrpaths.vrpath"
-            if os.path.exists(vrpaths_name):
-                os.remove(vrpaths_name)
-
-            #dump new file
-            if not vr_runtime is None:
-                try:
-                    g_session.env["PROTON_VR_RUNTIME"] = vr_runtime
-
-                    j = { "runtime": [ "C:\\vrclient\\", "C:\\vrclient" ] }
-
-                    if not vr_config is None:
-                        win_vr_config = subprocess.check_output([g_proton.wine_bin, "winepath", "-w", vr_config], env=g_session.env, stderr=g_session.log_file).decode("utf-8")
-                        j["config"] = [ win_vr_config.strip() ]
-
-                    if not vr_log is None:
-                        win_vr_log = subprocess.check_output([g_proton.wine_bin, "winepath", "-w", vr_log], env=g_session.env, stderr=g_session.log_file).decode("utf-8")
-                        j["log"] = [ win_vr_log.strip() ]
-
-                    j["version"] = 1
-                    j["jsonid"] = "vrpathreg"
-
-                    with open(vrpaths_name, "w") as vfile:
-                        json.dump(j, vfile, indent=2)
-                except (ValueError, OSError):
-                    log("Unable to write VR config! " + str(sys.exc_info()[1]))
-
             if "wined3d" in g_session.compat_config:
                 dxvkfiles = []
                 wined3dfiles = ["d3d11", "d3d10", "d3d10core", "d3d10_1", "dxgi", "d3d9"]
@@ -696,8 +610,6 @@ if __name__ == "__main__":
 
     g_proton = Proton(os.path.dirname(sys.argv[0]))
 
-    g_proton.extract_tarball()
-
     g_compatdata = CompatData(os.environ["STEAM_COMPAT_DATA_PATH"])
 
     g_session = Session()
